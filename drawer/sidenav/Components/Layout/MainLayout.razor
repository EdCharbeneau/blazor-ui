@inherits LayoutComponentBase
@inject NavigationManager _navMan

<style>
    /* the size of the containers will fill up their parents up to the viewport */
    html, body {
        width: 100%;
        height: 100%;
        max-height: 100%;
    }
    body {    
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    /* vertical scroll should happen in the main portion of the content - where the Body is
        This keeps the header sticky at the top */
    .main {
        padding: var(--kendo-spacing-4, 1rem);
        overflow: auto;
    }

    .k-drawer-container {
        flex:1;
        overflow:auto;
    }

    /* horizontal scroll happens in the drawer content to keep the drawer on the left side of the screen */
    .k-drawer-content {
        height:100%;
        overflow-x: auto;
    }

</style>

<TelerikRootComponent>
    <TelerikAppBar ThemeColor="@(ThemeConstants.AppBar.ThemeColor.Tertiary)" >
    <AppBarSection>
        <TelerikButton FillMode="flat" 
            Icon="@SvgIcon.Menu" 
            OnClick="@(() => DrawerRef.ToggleAsync())"/>
    </AppBarSection>
    <AppBarSpacer Size="var(--kendo-spacing-1)" />
    <AppBarSection>
        <h1>ML Dashboard</h1>
    </AppBarSection>
</TelerikAppBar>
    <TelerikDrawer Data="@NavigablePages" 
            @bind-Expanded="@DrawerExpanded" 
            MiniMode="true" 
            Mode="@DrawerMode.Push" 
            @ref="@DrawerRef" 
            @bind-SelectedItem="@SelectedItem">
        <DrawerContent>
            @* This layout is now in the drawer Content, and is very similar to the default template layout *@
            <div class="main">
                    @Body
            </div>
        </DrawerContent>
    </TelerikDrawer>

</TelerikRootComponent>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool DrawerExpanded { get; set; } = true; // drawer expanded by default
    DrawerItem SelectedItem { get; set; } = DrawerItem.None(); // set in OnInitialized
    TelerikDrawer<DrawerItem> DrawerRef { get; set; } = default!; // set by framework

    // in this sample we hardcode the existing pages, in your case you can
    // create the list based on your business logic (e.g., based on user roles/access)
    List<DrawerItem> NavigablePages { get; set; } = new List<DrawerItem>
    {
        new DrawerItem { Text = "Home", Url = "/", Icon = SvgIcon.Home.Name },
        new DrawerItem { Separator = true },
        new DrawerItem { Text = "Counter", Url = "counter", Icon = SvgIcon.Plus.Name },
        new DrawerItem { Text = "Weather", Url = "weather", Icon = SvgIcon.Cloud.Name },
    };

    protected override void OnInitialized()
    {
        // pre-select the page the user lands on
        // as the user clicks items, the DOM changes only in the Body and so the selected item stays active
        SelectedItem = NavigablePages.Where(hasUrlEqualToPageRoute).FirstOrDefault(DrawerItem.None());

        base.OnInitialized();
    }

    bool hasUrlEqualToPageRoute(DrawerItem item) {
        if(item.Url is null) return false;

        string navItemAsAbsoluteUri = _navMan.ToAbsoluteUri(item.Url).AbsoluteUri;
        if (string.Equals(_navMan.Uri, navItemAsAbsoluteUri, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        // Special case: highlight links to http://host/path/ even if you're
        // at http://host/path (with no trailing slash)
        //
        // This is because the router accepts an absolute URI value of "same
        // as base URI but without trailing slash" as equivalent to "base URI",
        // which in turn is because it's common for servers to return the same page
        // for http://host/vdir as they do for host://host/vdir/ as it's no
        // good to display a blank page in that case.
        bool isNotRoot = item.Url != "/";
        bool hasTrailingSlash = _navMan.Uri[_navMan.Uri.Length - 1] == '/';
        if(isNotRoot && hasTrailingSlash && 
        _navMan.Uri.StartsWith(navItemAsAbsoluteUri, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    // generally, this should go into its own file, but it is here to keep all the drawer-related code in one place
    public class DrawerItem
    {
        public string Text { get; set; } = "";
        public string? Url { get; set; }
        public string? Icon { get; set; }
        public bool Separator { get; set; }
        public static DrawerItem None() => new();
    }
}

